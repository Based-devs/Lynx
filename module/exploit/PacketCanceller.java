package com.based.lynx.module.exploit;

import java.util.ArrayList;

import com.based.lynx.event.PacketEvent;
import com.based.lynx.module.Category;
import com.based.lynx.module.Module;
import com.based.lynx.setting.Setting;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.CPacketEntityAction;
import net.minecraft.network.play.client.CPacketInput;
import net.minecraft.network.play.client.CPacketPlayer;
import net.minecraft.network.play.client.CPacketPlayerAbilities;
import net.minecraft.network.play.client.CPacketPlayerDigging;
import net.minecraft.network.play.client.CPacketPlayerTryUseItem;
import net.minecraft.network.play.client.CPacketPlayerTryUseItemOnBlock;
import net.minecraft.network.play.client.CPacketUseEntity;
import net.minecraft.network.play.client.CPacketVehicleMove;
import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;

public final class PacketCanceller
        extends Module {
    private final Setting<Boolean> CancelCPacketInput = new Setting<>("Input", true)
            .setDescription("Cancel the CPacketInput packet");

    private final Setting<Boolean> CancelPosition = new Setting<>("Position", false)
            .setDescription("Cancel the CPacketPlayer packet");

    private final Setting<Boolean> CancelPositionRotation = new Setting<>("PositionRotation", false)
            .setDescription("Cancel the CPacketPlayer Position Rotation packet");

    private final Setting<Boolean> CancelRotation = new Setting<>("Rotation", false)
            .setDescription("Cancel the CPacketPlayer Rotation packet");

    private final Setting<Boolean> CancelCPacketPlayerAbilities = new Setting<>("PlayerAbilities", false)
            .setDescription("Cancel the CPacketPlayerAbilities packet");

    private final Setting<Boolean> CancelCPacketPlayerDigging = new Setting<>("PlayerDigging", false)
            .setDescription("Cancel the CPacketPlayerDigging packet");

    private final Setting<Boolean> CancelCPacketPlayerTryUseItem = new Setting<>("PlayerTryUseItem", false)
            .setDescription("Cancel the CPacketPlayerTryUseItem packet");

    private final Setting<Boolean> CancelCPacketPlayerTryUseItemOnBlock = new Setting<>("PlayerTryUseItemOnBlock", false)
            .setDescription("Cancel the CPacketPlayerTryUseItemOnBlock packet");

    private final Setting<Boolean> CancelCPacketEntityAction = new Setting<>("EntityAction", false)
            .setDescription("Cancel the CPacketEntityAction packet");

    private final Setting<Boolean> CancelCPacketUseEntity = new Setting<>("UseEntity", false)
            .setDescription("Cancel the CPacketUseEntity packet");

    private final Setting<Boolean> CancelCPacketVehicleMove = new Setting<>("VehicleMove", false)
            .setDescription("Cancel the CPacketVehicleMove packet");
    private final ArrayList<Packet> PacketsToIgnore = new ArrayList();
    private int PacketsCanelled = 0;

    public PacketCanceller() {
        super("PacketCanceller", "", Category.EXPLOIT);

        this.addSetting(this.CancelCPacketInput);
        this.addSetting(this.CancelPosition);
        this.addSetting(this.CancelPositionRotation);
        this.addSetting(this.CancelRotation);
        this.addSetting(this.CancelCPacketPlayerAbilities);
        this.addSetting(this.CancelCPacketPlayerDigging);
        this.addSetting(this.CancelCPacketPlayerTryUseItem);
        this.addSetting(this.CancelCPacketPlayerTryUseItemOnBlock);
        this.addSetting(this.CancelCPacketEntityAction);
        this.addSetting(this.CancelCPacketUseEntity);
        this.addSetting(this.CancelCPacketVehicleMove);
    }

    @Override
    public void onDisable() {
        super.onDisable();
        this.PacketsCanelled = 0;
    }

    @SubscribeEvent
    public void onPacketSend(PacketEvent.Send event) {
        if (event.getPacket() instanceof CPacketInput && this.CancelCPacketInput.getValue() || event.getPacket() instanceof CPacketPlayer.Position && this.CancelPosition.getValue() || event.getPacket() instanceof CPacketPlayer.PositionRotation && this.CancelPositionRotation.getValue() || event.getPacket() instanceof CPacketPlayer.Rotation && this.CancelRotation.getValue() || event.getPacket() instanceof CPacketPlayerAbilities && this.CancelCPacketPlayerAbilities.getValue() || event.getPacket() instanceof CPacketPlayerDigging && this.CancelCPacketPlayerDigging.getValue() || event.getPacket() instanceof CPacketPlayerTryUseItem && this.CancelCPacketPlayerTryUseItem.getValue() || event.getPacket() instanceof CPacketPlayerTryUseItemOnBlock && this.CancelCPacketPlayerTryUseItemOnBlock.getValue() || event.getPacket() instanceof CPacketEntityAction && this.CancelCPacketEntityAction.getValue() || event.getPacket() instanceof CPacketUseEntity && this.CancelCPacketUseEntity.getValue() || event.getPacket() instanceof CPacketVehicleMove && this.CancelCPacketVehicleMove.getValue()) {
            if (this.PacketsToIgnore.contains(event.getPacket())) {
                this.PacketsToIgnore.remove(event.getPacket());
                return;
            }
            ++this.PacketsCanelled;
            event.setCanceled(true);
            return;
        }
    }

    public void AddIgnorePacket(Packet p_Packet) {
        this.PacketsToIgnore.add(p_Packet);
    }
}
